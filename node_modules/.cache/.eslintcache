[{"/home/prajjwal/Documents/GitHub/todo-app/src/index.js":"1","/home/prajjwal/Documents/GitHub/todo-app/src/App.js":"2","/home/prajjwal/Documents/GitHub/todo-app/src/components/Landing.js":"3","/home/prajjwal/Documents/GitHub/todo-app/src/components/NotFound.js":"4","/home/prajjwal/Documents/GitHub/todo-app/src/components/Navbar.js":"5","/home/prajjwal/Documents/GitHub/todo-app/src/components/Login.js":"6","/home/prajjwal/Documents/GitHub/todo-app/src/components/Logout.js":"7","/home/prajjwal/Documents/GitHub/todo-app/src/components/TodoComp.js":"8","/home/prajjwal/Documents/GitHub/todo-app/src/components/firebase.js":"9"},{"size":219,"mtime":1620376001297,"results":"10","hashOfConfig":"11"},{"size":827,"mtime":1620681546158,"results":"12","hashOfConfig":"11"},{"size":423,"mtime":1620677737239,"results":"13","hashOfConfig":"11"},{"size":152,"mtime":1620377719627,"results":"14","hashOfConfig":"11"},{"size":1848,"mtime":1620681500046,"results":"15","hashOfConfig":"11"},{"size":1939,"mtime":1620680472703,"results":"16","hashOfConfig":"11"},{"size":153,"mtime":1620380181224,"results":"17","hashOfConfig":"11"},{"size":576,"mtime":1620682142654,"results":"18","hashOfConfig":"11"},{"size":420,"mtime":1620669513628,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gfzmey",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/prajjwal/Documents/GitHub/todo-app/src/index.js",[],"/home/prajjwal/Documents/GitHub/todo-app/src/App.js",[],"/home/prajjwal/Documents/GitHub/todo-app/src/components/Landing.js",[],"/home/prajjwal/Documents/GitHub/todo-app/src/components/NotFound.js",[],"/home/prajjwal/Documents/GitHub/todo-app/src/components/Navbar.js",["40","41","42","43"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport firebase from \"firebase\";\nimport fire from \"./firebase\";\nexport default function Navbar() {\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n\n  // Listen to the Firebase Auth state and set the local state.\n  useEffect(() => {\n    const unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged((user) => {\n        setIsSignedIn(!!user);\n      });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n\n  return (\n    <div className=\"navBar\">\n      <Link className=\"navLink\" to=\"/\">\n        <h3>To-Do-Da</h3>\n      </Link>\n      <div className=\"links\">\n        <Link className=\"navLink\" to=\"/\">\n          <li>Home</li>\n        </Link>\n        <Link className=\"navLink\" to=\"/books\">\n          <li>About</li>\n        </Link>\n        <Link className=\"navLink\" to=\"/books\">\n          <li>Contact Me</li>\n        </Link>\n      </div>\n      <div className=\"nav-btns\">\n        {isSignedIn ? (\n          <>\n            <Link className=\"navLink\">\n              <a className=\"btn-sec\" onClick={() => firebase.auth().signOut()}>\n                Logout\n              </a>\n            </Link>\n            <Link className=\"navLink\" to=\"/mytodos\">\n              <a className=\"btn-sec\">My Todos</a>\n            </Link>\n            <Link className=\"navLink\" to=\"/auth/login\">\n              <img\n                className=\"avatar-small\"\n                src={firebase.auth().currentUser.photoURL}\n                alt=\"\"\n              />\n            </Link>\n          </>\n        ) : (\n          <Link className=\"navLink\" to=\"/auth/login\">\n            <a className=\"btn-sec\">Login</a>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/prajjwal/Documents/GitHub/todo-app/src/components/Login.js",["44"],"import React, { useEffect, useState } from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.EmailAuthProvider.PROVIDER_ID,\n  ],\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false,\n  },\n};\n\nfunction SignInScreen() {\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n\n  // Listen to the Firebase Auth state and set the local state.\n  useEffect(() => {\n    const unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged((user) => {\n        setIsSignedIn(!!user);\n      });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n\n  if (!isSignedIn) {\n    return (\n      <div className=\"half-background\">\n        &nbsp;\n        <div className=\"authContainer\">\n          <h1>Sign In or Register</h1>\n          <StyledFirebaseAuth\n            uiConfig={uiConfig}\n            firebaseAuth={firebase.auth()}\n          />\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <>\n        <div className=\"half-background\">\n          &nbsp;\n          <div className=\"authContainer\">\n            <img\n              className=\"avatar\"\n              src={firebase.auth().currentUser.photoURL}\n              alt=\"\"\n            />\n            <h1>This is your Dashboard</h1>\n            <p>\n              Welcome {firebase.auth().currentUser.displayName}! You are now\n              signed-in!\n            </p>\n            <a className=\"btn\" onClick={() => firebase.auth().signOut()}>\n              Sign-out\n            </a>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default SignInScreen;\n","/home/prajjwal/Documents/GitHub/todo-app/src/components/Logout.js",[],"/home/prajjwal/Documents/GitHub/todo-app/src/components/TodoComp.js",[],"/home/prajjwal/Documents/GitHub/todo-app/src/components/firebase.js",[],{"ruleId":"45","severity":1,"message":"46","line":5,"column":8,"nodeType":"47","messageId":"48","endLine":5,"endColumn":12},{"ruleId":"49","severity":1,"message":"50","line":39,"column":15,"nodeType":"51","endLine":39,"endColumn":80},{"ruleId":"49","severity":1,"message":"50","line":44,"column":15,"nodeType":"51","endLine":44,"endColumn":38},{"ruleId":"49","severity":1,"message":"50","line":56,"column":13,"nodeType":"51","endLine":56,"endColumn":36},{"ruleId":"49","severity":1,"message":"50","line":61,"column":13,"nodeType":"51","endLine":61,"endColumn":74},"no-unused-vars","'fire' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]