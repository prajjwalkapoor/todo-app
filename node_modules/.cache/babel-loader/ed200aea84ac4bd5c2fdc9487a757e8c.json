{"ast":null,"code":"var _jsxFileName = \"/home/prajjwal/Documents/GitHub/To-DO-DA/src/Context/GlobalContext.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { createContext, useState, useEffect } from \"react\";\nimport firebase from \"firebase\"; // import { fire } from \"./firebase_config\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoginContext = /*#__PURE__*/createContext();\nexport function GlobalProvider(props) {\n  _s();\n\n  const uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: \"popup\",\n    signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID],\n    callbacks: {\n      // Avoid redirects after sign-in.\n      signInSuccessWithAuthResult: () => false\n    }\n  }; // Configure FirebaseUI.\n\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n  // Listen to the Firebase Auth state and set the local state.\n\n  useEffect(() => {\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => {\n      setIsSignedIn(!!user);\n    });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n    value: (isSignedIn, uiConfig),\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GlobalProvider, \"ES28sB8qKBhxH4u/sxzLxEgNPXw=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/home/prajjwal/Documents/GitHub/To-DO-DA/src/Context/GlobalContext.js"],"names":["React","createContext","useState","useEffect","firebase","LoginContext","GlobalProvider","props","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","isSignedIn","setIsSignedIn","unregisterAuthObserver","onAuthStateChanged","user","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CACA;;;AACA,OAAO,MAAMC,YAAY,gBAAGJ,aAAa,EAAlC;AAEP,OAAO,SAASK,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AACpC,QAAMC,QAAQ,GAAG;AACf;AACAC,IAAAA,UAAU,EAAE,OAFG;AAGfC,IAAAA,aAAa,EAAE,CACbN,QAAQ,CAACO,IAAT,CAAcC,kBAAd,CAAiCC,WADpB,EAEbT,QAAQ,CAACO,IAAT,CAAcG,iBAAd,CAAgCD,WAFnB,CAHA;AAOfE,IAAAA,SAAS,EAAE;AACT;AACAC,MAAAA,2BAA2B,EAAE,MAAM;AAF1B;AAPI,GAAjB,CADoC,CAcpC;;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,KAAD,CAA5C,CAhBoC,CAgBiB;AAErD;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,sBAAsB,GAAGf,QAAQ,CACpCO,IAD4B,GAE5BS,kBAF4B,CAERC,IAAD,IAAU;AAC5BH,MAAAA,aAAa,CAAC,CAAC,CAACG,IAAH,CAAb;AACD,KAJ4B,CAA/B;AAKA,WAAO,MAAMF,sBAAsB,EAAnC,CANc,CAMyB;AACxC,GAPQ,EAON,EAPM,CAAT;AASA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,GAAGF,UAAU,EAAET,QAAf,CAA5B;AAAA,cACGD,KAAK,CAACe;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjCehB,c;;KAAAA,c","sourcesContent":["import React from \"react\";\nimport { createContext, useState, useEffect } from \"react\";\nimport firebase from \"firebase\";\n// import { fire } from \"./firebase_config\";\nexport const LoginContext = createContext();\n\nexport function GlobalProvider(props) {\n  const uiConfig = {\n    // Popup signin flow rather than redirect flow.\n    signInFlow: \"popup\",\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID,\n    ],\n    callbacks: {\n      // Avoid redirects after sign-in.\n      signInSuccessWithAuthResult: () => false,\n    },\n  };\n\n  // Configure FirebaseUI.\n\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n\n  // Listen to the Firebase Auth state and set the local state.\n  useEffect(() => {\n    const unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged((user) => {\n        setIsSignedIn(!!user);\n      });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n\n  return (\n    <LoginContext.Provider value={(isSignedIn, uiConfig)}>\n      {props.children}\n    </LoginContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}