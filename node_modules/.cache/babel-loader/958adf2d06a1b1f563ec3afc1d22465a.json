{"ast":null,"code":"var _jsxFileName = \"/home/prajjwal/Documents/GitHub/To-DO-DA/src/Components/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID],\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false\n  }\n};\nexport default function Login() {\n  _s();\n\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n  // Listen to the Firebase Auth state and set the local state.\n\n  useEffect(() => {\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => {\n      setIsSignedIn(!!user);\n    });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n\n  if (!isSignedIn) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"authContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sign In or Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledFirebaseAuth, {\n        uiConfig: uiConfig,\n        firebaseAuth: firebase.auth()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Login, \"ES28sB8qKBhxH4u/sxzLxEgNPXw=\");\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/prajjwal/Documents/GitHub/To-DO-DA/src/Components/Login.js"],"names":["React","useState","useEffect","StyledFirebaseAuth","firebase","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","Login","isSignedIn","setIsSignedIn","unregisterAuthObserver","onAuthStateChanged","user"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,kBAAP,MAA+B,qCAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;;AACA,MAAMC,QAAQ,GAAG;AACf;AACAC,EAAAA,UAAU,EAAE,OAFG;AAGfC,EAAAA,aAAa,EAAE,CACbH,QAAQ,CAACI,IAAT,CAAcC,kBAAd,CAAiCC,WADpB,EAEbN,QAAQ,CAACI,IAAT,CAAcG,iBAAd,CAAgCD,WAFnB,CAHA;AAOfE,EAAAA,SAAS,EAAE;AACT;AACAC,IAAAA,2BAA2B,EAAE,MAAM;AAF1B;AAPI,CAAjB;AAaA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,KAAD,CAA5C,CAD8B,CACuB;AAErD;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,sBAAsB,GAAGb,QAAQ,CACpCI,IAD4B,GAE5BU,kBAF4B,CAERC,IAAD,IAAU;AAC5BH,MAAAA,aAAa,CAAC,CAAC,CAACG,IAAH,CAAb;AACD,KAJ4B,CAA/B;AAKA,WAAO,MAAMF,sBAAsB,EAAnC,CANc,CAMyB;AACxC,GAPQ,EAON,EAPM,CAAT;;AASA,MAAI,CAACF,UAAL,EAAiB;AACf,wBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,kBAAD;AACE,QAAA,QAAQ,EAAEV,QADZ;AAEE,QAAA,YAAY,EAAED,QAAQ,CAACI,IAAT;AAFhB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;AACF;;GAxBuBM,K;;KAAAA,K","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\";\nimport firebase from \"firebase\";\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.EmailAuthProvider.PROVIDER_ID,\n  ],\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false,\n  },\n};\n\nexport default function Login() {\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n\n  // Listen to the Firebase Auth state and set the local state.\n  useEffect(() => {\n    const unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged((user) => {\n        setIsSignedIn(!!user);\n      });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n\n  if (!isSignedIn) {\n    return (\n      <div className=\"authContainer\">\n        <h1>Sign In or Register</h1>\n        <StyledFirebaseAuth\n          uiConfig={uiConfig}\n          firebaseAuth={firebase.auth()}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}