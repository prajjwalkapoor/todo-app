{"ast":null,"code":"var _jsxFileName = \"/home/prajjwal/Documents/GitHub/To-DO-DA/src/Context/GlobalContext.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { createContext } from \"react\";\nimport firebase from \"firebase\";\nimport { fire } from \"./firebase_config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginContext = /*#__PURE__*/createContext();\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID, firebase.auth.EmailAuthProvider.PROVIDER_ID],\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false\n  }\n};\nexport function GlobalProvider(props) {\n  _s();\n\n  // Configure FirebaseUI.\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n  // Listen to the Firebase Auth state and set the local state.\n\n  useEffect(() => {\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => {\n      setIsSignedIn(!!user);\n    });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n    value: isSignedIn,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GlobalProvider, \"ES28sB8qKBhxH4u/sxzLxEgNPXw=\");\n\n_c = GlobalProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalProvider\");","map":{"version":3,"sources":["/home/prajjwal/Documents/GitHub/To-DO-DA/src/Context/GlobalContext.js"],"names":["React","createContext","firebase","fire","LoginContext","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","GlobalProvider","props","isSignedIn","setIsSignedIn","useState","useEffect","unregisterAuthObserver","onAuthStateChanged","user","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;;AACA,MAAMC,YAAY,gBAAGH,aAAa,EAAlC;AAEA,MAAMI,QAAQ,GAAG;AACf;AACAC,EAAAA,UAAU,EAAE,OAFG;AAGfC,EAAAA,aAAa,EAAE,CACbL,QAAQ,CAACM,IAAT,CAAcC,kBAAd,CAAiCC,WADpB,EAEbR,QAAQ,CAACM,IAAT,CAAcG,iBAAd,CAAgCD,WAFnB,CAHA;AAOfE,EAAAA,SAAS,EAAE;AACT;AACAC,IAAAA,2BAA2B,EAAE,MAAM;AAF1B;AAPI,CAAjB;AAYA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AACpC;AAEA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BC,QAAQ,CAAC,KAAD,CAA5C,CAHoC,CAGiB;AAErD;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMC,sBAAsB,GAAGlB,QAAQ,CACpCM,IAD4B,GAE5Ba,kBAF4B,CAERC,IAAD,IAAU;AAC5BL,MAAAA,aAAa,CAAC,CAAC,CAACK,IAAH,CAAb;AACD,KAJ4B,CAA/B;AAKA,WAAO,MAAMF,sBAAsB,EAAnC,CANc,CAMyB;AACxC,GAPQ,EAON,EAPM,CAAT;AASA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEJ,UAA9B;AAAA,cACGD,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GApBeT,c;;KAAAA,c","sourcesContent":["import React from \"react\";\nimport { createContext } from \"react\";\nimport firebase from \"firebase\";\nimport { fire } from \"./firebase_config\";\nconst LoginContext = createContext();\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.EmailAuthProvider.PROVIDER_ID,\n  ],\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false,\n  },\n};\nexport function GlobalProvider(props) {\n  // Configure FirebaseUI.\n\n  const [isSignedIn, setIsSignedIn] = useState(false); // Local signed-in state.\n\n  // Listen to the Firebase Auth state and set the local state.\n  useEffect(() => {\n    const unregisterAuthObserver = firebase\n      .auth()\n      .onAuthStateChanged((user) => {\n        setIsSignedIn(!!user);\n      });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n\n  return (\n    <LoginContext.Provider value={isSignedIn}>\n      {props.children}\n    </LoginContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}